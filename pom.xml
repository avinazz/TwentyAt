<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<!-- This is the master PARENT Project Object Model descriptor. This descriptor 
		will be inherited by all modules. Build Lifecycle Phases: ======================== 
		* validate validate the project is correct and all necessary information 
		is available * INITIALIZE * generate-sources generate any source code for 
		inclusion in compilation * process-sources process the source code, for example 
		to filter any values * generate-resources generate resources for inclusion 
		in the package * process-resources copy and process the resources into the 
		destination directory, ready for packaging * compile compile the source code 
		of the project * process-classes post-process the generated files from compilation, 
		for example to do bytecode enhancement on Java classes * generate-test-sources 
		generate any test source code for inclusion in compilation * process-test-sources 
		process the test source code, for example to filter any values * generate-test-resources 
		create resources for testing * process-test-resources copy and process the 
		resources into the test destination directory * test-compile compile the 
		test source code into the test destination directory * test run tests using 
		a suitable unit testing framework. These tests should not require the code 
		be packaged or deployed * package take the compiled code and package it in 
		its distributable format, such as a JAR * integration-test process and deploy 
		the package if necessary into an environment where integration tests can 
		be run * verify run any checks to verify the package is valid and meets quality 
		criteria * install install the package into the local repository, for use 
		as a dependency in other projects locally * deploy done in an integration 
		or release environment, copies the final package to the remote repository 
		for sharing with other developers and projects -->
	<groupId>com.twentyat</groupId>
	<version>1.0.0.0</version>
	<artifactId>root</artifactId>
	<packaging>pom</packaging>
	<name>root</name>
	<modules>
		<module>twentyat-dataservice</module>
		<module>twentyat-web</module>
		<module>twentyat-communication</module>		
	</modules>

	<organization>
		<name>TwentyAt</name>
		<url>http://www.twentyat.com</url>
	</organization>

	<licenses>
		<license>
			<name/>
			<url/>
		</license>
	</licenses>

	<!-- <scm> <connection>scm:svn:http://localhost/svn/repos/twentyat</connection> 
		<developerConnection>scm:svn:http://localhost/svn/repos/twnetyat</developerConnection> 
		<url>http://localhost/svn/repos/twentyat/</url> </scm> -->

	<issueManagement>
		<system/>
		<url/>
	</issueManagement>

	<!-- ======================================================= -->
	<!-- Continous Integration Declarations -->
	<!-- ======================================================= -->
	<ciManagement>
		<system>hudson</system>
		<url>http://localhost/hudson</url>
		<notifiers>
			<notifier>
				<type>mail</type>
				<configuration>
					<address>bipin@techingen.com</address>
				</configuration>
				<sendOnError>true</sendOnError>
				<sendOnFailure>true</sendOnFailure>
				<sendOnSuccess>true</sendOnSuccess>
				<sendOnWarning>true</sendOnWarning>
			</notifier>
		</notifiers>
	</ciManagement>

	<repositories>
		<repository>
			<id>Maven</id>
			<name>Maven</name>
			<url>http://repo1.maven.org/maven2/</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>
	<build>
		<defaultGoal>install</defaultGoal>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>hibernate3-maven-plugin</artifactId>
					<version>2.0-alpha-2</version>
					<configuration>
						<components>
							<component>
								<name>hbm2hbmxml</name>
								<outputDirectory>target/classes</outputDirectory>
							</component>
						</components>
						<componentProperties>
							<implementation>jpaconfiguration</implementation>
							<persistenceunit>ApplicationEntityManager</persistenceunit>
							<drop>true</drop>
							<skip>${maven.test.skip}</skip>
							<propertyfile>target/test-classes/jdbc.properties</propertyfile>
						</componentProperties>
					</configuration>
					<executions>
						<execution>
							<id>hbm2ddl</id>
							<phase>process-test-resources</phase>
							<goals>
								<goal>hbm2ddl</goal>
							</goals>
						</execution>
					</executions>
					<dependencies>
						<dependency>
							<groupId>${jdbc.groupId}</groupId>
							<artifactId>${jdbc.artifactId}</artifactId>
							<version>${jdbc.version}</version>
						</dependency>
					</dependencies>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.4.3</version>
				<configuration>
					<argLine>-Xmx256m</argLine>
					<testFailureIgnore>false</testFailureIgnore>
					<suiteXmlFiles>
						<suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>
					</suiteXmlFiles>
					<excludes>
						<exclude>**/selenium/*Test.java</exclude>
						<exclude>**/*$*</exclude>
					</excludes>
				</configuration>

				<executions>
					<execution>
						<id>surefire-it</id>
						<phase>integration-test</phase>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
							<suiteXmlFiles>
								<suiteXmlFile>src/test/resources/testng-functional.xml</suiteXmlFile>
							</suiteXmlFiles>
							<excludes>
								<exclude>none</exclude>
							</excludes>
							<includes>
								<include>**/selenium/*Test.java</include>
							</includes>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.0.2</version>
				<configuration>
					<manifest>
						<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
					</manifest>
					<archive>
						<manifestEntries>
							<Implementation-Version>${version}.r${SVN_REVISION}</Implementation-Version>
							<Implementation-Build>r${SVN_REVISION} Build(${BUILD_NUMBER})</Implementation-Build>
							<Implementation-BuiltAt>${BUILD_ID}</Implementation-BuiltAt>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
		</plugins>
	</build>


	<dependencies>
		<!-- Spring Dependencies -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-jaxrs</artifactId>
			<version>1.6.1</version>
		</dependency>

		<dependency>
			<groupId>com.googlecode.janrain4j</groupId>
			<artifactId>janrain4j</artifactId>
			<version>1.1.0</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>jivesoftware</groupId>
			<artifactId>smack</artifactId>
			<version>3.1.0</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>3.0.5.RELEASE</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>jsr250-api</artifactId>
			<version>1.0</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.14</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate</artifactId>
			<version>3.2.7.ga</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>javax.transaction</groupId>
			<artifactId>jta</artifactId>
			<version>1.1</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>javax.persistence</groupId>
			<artifactId>persistence-api</artifactId>
			<version>1.0</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-annotations</artifactId>
			<version>3.4.0.GA</version>
			<type>jar</type>
			<scope>compile</scope>
			<exclusions>
				<exclusion>
					<artifactId>slf4j-api</artifactId>
					<groupId>org.slf4j</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.6.1</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.6.1</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>3.3.1.GA</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-commons-annotations</artifactId>
			<version>3.1.0.GA</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.6</version>
			<scope>test</scope>
		</dependency>

		<!-- MK Added Dependancies -->


		<dependency>
			<groupId>org.easymock</groupId>
			<artifactId>easymock</artifactId>
			<version>2.3</version>
			<scope>test</scope>
		</dependency>





		<dependency>
			<groupId>org.apache.xbean</groupId>
			<artifactId>xbean-spring</artifactId>
			<version>3.3</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.persistence</groupId>
			<artifactId>persistence-api</artifactId>
			<version>1.0</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>5.14.9</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
	</dependencies>

	<properties>
		<!-- Application settings ========================================== -->
		<aspectj.version>1.6.0</aspectj.version>
		<spring.version>3.0.4.RELEASE</spring.version>
		<c3p0.version>0.9.1.2</c3p0.version>

		<!-- Testing dependency versions -->
		<testng.version>5.7</testng.version>
		<dbunit.version>2.2.1</dbunit.version>
		<easymock.version>2.3</easymock.version>
		<jmock.version>1.1.0</jmock.version>
		<junit.version>4.4</junit.version>

		<cxf.version>2.1</cxf.version>
		<activemq.version>5.1.0</activemq.version>

		<wiser.version>1.2</wiser.version>

		<mysql.version>5.1.6</mysql.version>
		<h2.version>1.0.20070617</h2.version>
		<derbyclient.version>10.4.1.3</derbyclient.version>

		<ibatis.version>3.3.1.ga</ibatis.version>

		<servlet.version>2.5</servlet.version>
		<jsp.version>2.1</jsp.version>
		<el.version>1.2</el.version>
		<richfaces.version>3.2.0.CR5</richfaces.version>


		<!-- Cargo settings ================================================ -->
		<cargo.container>tomcat5x</cargo.container>
		<cargo.container.home>${env.CATALINA_HOME}</cargo.container.home>
		<cargo.container.url>
			http://archive.apache.org/dist/tomcat/tomcat-5/v5.5.26/bin/apache-tomcat-5.5.26.zip
		</cargo.container.url>
		<cargo.host>localhost</cargo.host>
		<cargo.port>8888</cargo.port>
		<cargo.logging>high</cargo.logging>
		<!-- This setting holds the container at your prompt -->
		<cargo.wait>false</cargo.wait>

		<!-- This works for Tomcat: -->
		<test.application.address>http://localhost:8888/${pom.artifactId}/
		</test.application.address>
		<!-- This works for Jetty: -->
		<!--<test.application.address>http://localhost:8888</test.application.address> -->


		<!-- Database settings ============================================= -->
		<dbunit.dataTypeFactoryName>org.dbunit.dataset.datatype.DefaultDataTypeFactory
		</dbunit.dataTypeFactoryName>
		<dbunit.operation.type>CLEAN_INSERT</dbunit.operation.type>
		<hibernate.dialect>org.hibernate.dialect.MySQL5InnoDBDialect
		</hibernate.dialect>
		<jdbc.groupId>mysql</jdbc.groupId>
		<jdbc.artifactId>mysql-connector-java</jdbc.artifactId>
		<jdbc.version>${mysql.version}</jdbc.version>
		<jdbc.driverClassName>com.mysql.jdbc.Driver</jdbc.driverClassName>
		<jdbc.url>
		    <![CDATA[jdbc:mysql://localhost:3306/testdb?createDatabaseIfNotExist=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;sessionVariables=FOREIGN_KEY_CHECKS=0]]>
		</jdbc.url>
		<jdbc.username>root</jdbc.username>
		<jdbc.password/>


		<!-- Misc Properties -->
		<javax.el.scope>provided</javax.el.scope>

		<clover.license.file>${clover.licenseLocation}</clover.license.file>

		<repositoryUrl>http://repo1.maven.org/maven2/</repositoryUrl>
		<snapshotRepositoryUrl>http://repo1.maven.org/maven2/
		</snapshotRepositoryUrl>
		<myBase>${basedir}</myBase>

	</properties>
</project>